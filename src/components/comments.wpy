<template>
  <view>
    <!-- comments -->
    <view class="comments" wx:if="{{ !loading && !isTest }}">
      <view class="comments-tabs">
        <text class="comments-tabs-1">评论 {{ blog.commentNum ? blog.commentNum : '' }}</text>
        <text class="comments-tabs-2">点赞 {{ blog.likeNum ? blog.likeNum : '' }}</text>
      </view>
      <view class="comments-list">
        <view
          class="comments-item"
          wx:for="{{ blog.comments }}"
          wx:for-item="comment"
          wx:for-index="i"
          wx:key="{{ i }}"
          @tap.stop="showAction({{ comment.nickname }}, {{ comment.openid }}, {{ comment.isAdmin }}, {{ comment.isAuthor }}, {{ comment.cid }}, {{ i }})">
          <view class="comment-user-info">
            <image src="{{ comment.avatar }}" class="comment-user-avatar"></image>
          </view>
          <view class="comment-info">
            <text class="comment-nickname">{{ comment.nickname }}</text>
            <text class="comment-content">{{ comment.content }}</text>
          </view>
        </view>
      </view>
    </view>

    <!-- comment -->
    <view class="comment" wx:if="{{ !loading }}">
      <view class="isanonymous" >
        <view
          class="isanonymous-btn {{ isAnonymous ? 'anonymous' : 'named' }}"
          @tap.stop="anonymousChange">
          <text class="anonymous-text">匿名</text>
          <text class="named-text">实名</text>
          <view class="isanonymous-btn-key"></view>
        </view>
      </view>
      <input
        class="comment-input"
        type="text"
        placeholder="{{ placeholder }}"
        bindinput="inputChange"
        bindfocus="inputFocus"
        bindblur="inputBlur"
        bindconfirm="inputConfirm"
        focus="{{ focusComment }}"
        value="{{ inputContent }}"
        confirm-type="send"
        cursor-spacing="42"/>
      <image
        class="send-btn"
        wx:if="{{ !disable }}"
        @tap.stop="send"
        src="../assets/svgs/send-fill.svg">
      </image>
    </view>
  </view>
</template>

<script>
import wepy from 'wepy'
import { api } from '../config'
import http from '../utils/request'
import sensitiveWordChecker from '../utils/sensitiveWordChecker'
import { dummy } from '../dummyData'

export default class Comment extends wepy.component {
  data = {
    blog: {},
    loading: true,
    placeholder: '写点评论...',
    focusComment: false,
    disable: true,
    comment: '',
    isAnonymous: true,
    replyTo: '',
    inputContent: '',
    isTest: false
  }

  methods = {
    async showAction (nickname, openid, isAdmin, isAuthor, id, idx) {
      console.log(arguments)
      const itemList = [`回复 ${nickname}:`]

      if (isAdmin || isAuthor) {
        itemList.push('删除评论')
      }

      try {
        const { tapIndex } = await wepy.showActionSheet({
          itemList
        })

        if (tapIndex === 0) {
          this.methods.reply.call(this, nickname, openid)
        } else if (tapIndex === 1) {
          await this.methods.deleteComment.call(this, id, idx)
        }
      } catch (e) {}
    },

    /**
     * 回复指定人
     * @param {String} nickname 回复对象的昵称
     * @param {String} openid   回复对象的 openid
     */
    reply (nickname, openid) {
      this.inputContent = '回复 ' + nickname + '：'
      this.focusComment = true
      this.replyTo = openid
      this.$apply()
    },

    /**
     * 删除评论
     * @param {Number} id  要删除对象的评论的 id
     * @param {Number} idx 要删除对象的索引
     */
    async deleteComment (id, idx) {
      const status = await wepy.showModal({
        title: '删除',
        content: '确定要删除这条评论？',
        cancelText: '不删了',
        cancelColor: '#666666',
        confirmText: '删除吧',
        confirmColor: '#3CC51F'
      })

      if (status.confirm) {
        try {
          await http({
            url: `${api.blog.deleteComment.url}/${id}`,
            method: api.blog.deleteComment.method
          })

          await this.fetchDetail(this.blog.id)
        } catch (e) {
          wepy.showModal({
            title: '提示',
            content: '删除评论失败。请重试或截图本提示，联系深大汪峰。' + e.message
          })
        }
      }
    },

    /**
     * 直接回复评论
     */
    comment () {
      this.inputContent = ''
      this.placeholder = '写点评论...'
      this.focusComment = true
      this.$apply()
    },

    /**
     * 输入监听器
     * 自动映射到 content
     * @param {Event} e 输入事件
     */
    inputChange (e) {
      this.comment = e.detail.value
      this.disable = e.detail.value === ''
    },

    /**
     * 输入框聚焦
     */
    inputFocus () {
      this.focusComment = true
      this.$apply()
    },

    /**
     * 输入框失去焦点
     */
    inputBlur () {
      this.focusComment = false
      this.$apply()
    },

    async inputConfirm () {
      await this.methods.send.call(this)
    },

    /**
     * 切换实名、匿名
     */
    anonymousChange () {
      this.isAnonymous = !this.isAnonymous
      this.$apply()
    },

    /**
     * 发送评论
     */
    async send () {
      wepy.showToast({
        title: '发送中...',
        icon: 'loading',
        duration: 10000,
        mask: true
      })

      if (sensitiveWordChecker(this.comment)) {
        wepy.hideToast()
        wepy.showModal({
          title: '提示',
          content: '包含敏感词汇，发送失败：）'
        })
        return
      }

      const pack = {
        bid: this.blog.id,
        content: this.comment,
        replyTo: this.replyTo,
        isAnonymous: this.isAnonymous
      }

      try {
        await http({
          url: api.blog.comment.url,
          method: api.blog.comment.method,
          data: pack
        })

        // init input
        this.inputContent = this.comment
        this.$apply()
        this.comment = ''
        this.replyTo = ''
        this.inputContent = ''
        this.disable = true
        this.focusComment = false
        this.isAnonymous = false

        // refetch data
        await this.fetchDetail(this.blog.id)
        this.$apply()

        wepy.hideToast()
      } catch (e) {
        wepy.hideToast()
        wepy.showModal({
          title: '提示',
          content: '发送评论失败。请重试或截图本提示，联系深大汪峰。' + e.message
        })
      }
    }
  }

  async onLoad (options) {
    this.loading = true
    this.$apply()

    // await this.fetchDetail(options.id)
    await this.fetchDetail('2')

    // this.focusComment = !!options.focusComment
    // this.isTest = !Boolean(wepy.getStorageSync(`isInTest-${version}`))
    this.$apply()
  }
  async onPullDownRefresh () {
    await this.fetchDetail(this.blog.id)
    wepy.stopPullDownRefresh()
    this.$apply()
  }

  async fetchDetail (id) {
    this.blog = dummy.blogDetail
    this.loading = false
    this.$apply()

    // const raw = await http({
    //   url: `${api.blog.detail.url}/${id}`,
    //   method: api.blog.detail.method
    // })
    //
    // if (raw.statusCode === 404) {
    //   await wepy.showToast({
    //     title: '树洞不存在',
    //     icon: 'loading',
    //     image: '../assets/svgs/warn.svg',
    //     duration: 1500,
    //     mask: true
    //   })
    //
    //   setTimeout(async () => {
    //     await wepy.navigateBack({
    //       delta: 1
    //     })
    //   }, 1500)
    // } else {
    //   this.loading = false
    //   this.blog = raw.data.data
    //   this.$apply()
    // }
  }
}
</script>

<style lang="less">
.comments {
  width: 100%;
  background: #FFF;
  overflow: hidden;

  .comments-tabs {
    width: 100%;
    height: 40px;
    padding: 0 20px;
    overflow: hidden;

    text {
      color: #777;
      font-size: 14px;
      font-weight: bold;
      line-height: 40px;
    }
    .comments-tabs-1 {
      float: left;
      color: #FA6570;
    }
    .comments-tabs-2 {
      float: right;
    }
  }

  .comments-list {
    width: 100%;
    padding: 0 10px;

    .comments-item {
      float: left;
      width: 100%;
      border-top: 1px solid #EEE;
      background: #FFF;

      .comment-user-info {
        float: left;
        width: 20%;
        height: 60px;
        text-align: center;

        .comment-user-avatar {
          width: 40px;
          height: 40px;
          margin: 10px 0;
          border-radius: 50%;
        }
      }

      .comment-info {
        float: left;
        width: 80%;
        padding: 10px 10px 10px 0;

        .comment-nickname {
          color: #333;
          font-size: 15px;
          font-weight: bold;
          line-height: 24px;
          display: block;
        }
        .comment-content {
          color: #666;
          font-size: 13px;
          line-height: 18px;
          display: block;
        }
      }
    }
  }
}

.comment {
  position: fixed;
  left: 0;
  bottom: 0;
  width: 100%;
  background: #FFF;
  border-top: 1px solid #DDD;

  .comment-input {
    padding: 15px;
    padding-right: 60px;
    min-height: 50px;
    max-height: 100px;
    font-size: 15px;
    color: #333;
    line-height: 20px;
    border-bottom: 1px solid #EEE;
  }

  .send-btn {
    position: absolute;
    top: 8px;
    right: 15px;
    width: 34px;
    height: 34px;
  }

  .isanonymous {
    background: #FFF;
    padding: 5px;
    overflow: hidden;
    float:left;
    min-height:50px;
    max-height:100px;

    .isanonymous-btn {
      position: relative;
      top:3px;
      float: left;
      width: 66px;
      height: 32px;
      padding: 0 6px;
      border-radius: 18px;
      transition: all 300ms ease;

      text {
        color: #FFF;
        font-size: 12px;
        line-height: 32px;
      }
      .anonymous-text {
        float: left;
      }
      .named-text {
        float: right;
      }

      .isanonymous-btn-key {
        position: absolute;
        left: 1px;
        top: 1px;
        width: 30px;
        height: 30px;
        border-radius: 50%;
        background: #FFF;
        box-shadow: 0 2px 3px rgba(0,0,0,0.4);
        transition: all 300ms ease;
      }
    }
    .anonymous {
      background: #FA6570;

      .isanonymous-btn-key {
        transform: translateX(34px);
      }
    }
    .named {
      background: #2ECC71;

      .isanonymous-btn-key {
        transform: translateX(0);
      }
    }
  }
}
</style>
